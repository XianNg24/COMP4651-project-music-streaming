{"id":"hhqr","dependencies":[{"name":"/Users/spittela/code/giphlify/package.json","includedInParent":true,"mtime":1599683869183},{"name":"/Users/spittela/code/giphlify/.babelrc","includedInParent":true,"mtime":1599669969128},{"name":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/package.json","includedInParent":true,"mtime":1599668814020}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.NO_RETRY_INCREMENT=exports.TIMEOUT_RETRY_COST=exports.RETRY_COST=exports.INITIAL_RETRY_TOKENS=exports.THROTTLING_RETRY_DELAY_BASE=exports.MAXIMUM_RETRY_DELAY=exports.DEFAULT_RETRY_DELAY_BASE=void 0,exports.DEFAULT_RETRY_DELAY_BASE=100,exports.MAXIMUM_RETRY_DELAY=2e4,exports.THROTTLING_RETRY_DELAY_BASE=500,exports.INITIAL_RETRY_TOKENS=500,exports.RETRY_COST=5,exports.TIMEOUT_RETRY_COST=10,exports.NO_RETRY_INCREMENT=1;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/constants.ts","name":null,"original":{"line":5,"column":13},"generated":{"line":1,"column":274}},{"source":"../../src/constants.ts","name":null,"original":{"line":5,"column":13},"generated":{"line":1,"column":282}},{"source":"../../src/constants.ts","name":null,"original":{"line":5,"column":40},"generated":{"line":1,"column":307}},{"source":"../../src/constants.ts","name":null,"original":{"line":11,"column":13},"generated":{"line":1,"column":311}},{"source":"../../src/constants.ts","name":null,"original":{"line":11,"column":13},"generated":{"line":1,"column":319}},{"source":"../../src/constants.ts","name":null,"original":{"line":11,"column":35},"generated":{"line":1,"column":339}},{"source":"../../src/constants.ts","name":null,"original":{"line":17,"column":13},"generated":{"line":1,"column":343}},{"source":"../../src/constants.ts","name":null,"original":{"line":17,"column":13},"generated":{"line":1,"column":351}},{"source":"../../src/constants.ts","name":null,"original":{"line":17,"column":43},"generated":{"line":1,"column":379}},{"source":"../../src/constants.ts","name":null,"original":{"line":22,"column":13},"generated":{"line":1,"column":383}},{"source":"../../src/constants.ts","name":null,"original":{"line":22,"column":13},"generated":{"line":1,"column":391}},{"source":"../../src/constants.ts","name":null,"original":{"line":22,"column":36},"generated":{"line":1,"column":412}},{"source":"../../src/constants.ts","name":null,"original":{"line":27,"column":13},"generated":{"line":1,"column":416}},{"source":"../../src/constants.ts","name":null,"original":{"line":27,"column":13},"generated":{"line":1,"column":424}},{"source":"../../src/constants.ts","name":null,"original":{"line":27,"column":26},"generated":{"line":1,"column":435}},{"source":"../../src/constants.ts","name":null,"original":{"line":33,"column":13},"generated":{"line":1,"column":437}},{"source":"../../src/constants.ts","name":null,"original":{"line":33,"column":13},"generated":{"line":1,"column":445}},{"source":"../../src/constants.ts","name":null,"original":{"line":33,"column":34},"generated":{"line":1,"column":464}},{"source":"../../src/constants.ts","name":null,"original":{"line":39,"column":13},"generated":{"line":1,"column":467}},{"source":"../../src/constants.ts","name":null,"original":{"line":39,"column":13},"generated":{"line":1,"column":475}},{"source":"../../src/constants.ts","name":null,"original":{"line":39,"column":34},"generated":{"line":1,"column":494}}],"sources":{"../../src/constants.ts":"/**\n * The base number of milliseconds to use in calculating a suitable cool-down\n * time when a retryable error is encountered.\n */\nexport const DEFAULT_RETRY_DELAY_BASE = 100;\n\n/**\n * The maximum amount of time (in milliseconds) that will be used as a delay\n * between retry attempts.\n */\nexport const MAXIMUM_RETRY_DELAY = 20 * 1000;\n\n/**\n * The retry delay base (in milliseconds) to use when a throttling error is\n * encountered.\n */\nexport const THROTTLING_RETRY_DELAY_BASE = 500;\n\n/**\n * Initial number of retry tokens in Retry Quota\n */\nexport const INITIAL_RETRY_TOKENS = 500;\n\n/**\n * The total amount of retry tokens to be decremented from retry token balance.\n */\nexport const RETRY_COST = 5;\n\n/**\n * The total amount of retry tokens to be decremented from retry token balance\n * when a throttling error is encountered.\n */\nexport const TIMEOUT_RETRY_COST = 10;\n\n/**\n * The total amount of retry token to be incremented from retry token balance\n * if an SDK operation invocation succeeds without requiring a retry request.\n */\nexport const NO_RETRY_INCREMENT = 1;\n"},"lineCount":null}},"error":null,"hash":"2c65623463e75d0d774eb965321b5fa0","cacheData":{"env":{}}}