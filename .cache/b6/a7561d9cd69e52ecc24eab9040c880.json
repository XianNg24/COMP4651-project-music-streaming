{"id":"AkfS","dependencies":[{"name":"/Users/spittela/code/giphlify/package.json","includedInParent":true,"mtime":1599671784193},{"name":"/Users/spittela/code/giphlify/.babelrc","includedInParent":true,"mtime":1599669969128},{"name":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/util-utf8-browser/package.json","includedInParent":true,"mtime":1599668814061}],"generated":{"js":"\"use strict\";function e(e){return(new TextEncoder).encode(e)}function t(e){return new TextDecoder(\"utf-8\").decode(e)}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.toUtf8=exports.fromUtf8=void 0,exports.fromUtf8=e,exports.toUtf8=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":42,"column":16},"generated":{"line":1,"column":22}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":42,"column":25},"generated":{"line":1,"column":24}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":43,"column":2},"generated":{"line":1,"column":27}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":43,"column":9},"generated":{"line":1,"column":34}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":43,"column":13},"generated":{"line":1,"column":38}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":43,"column":27},"generated":{"line":1,"column":51}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":43,"column":34},"generated":{"line":1,"column":58}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":46,"column":0},"generated":{"line":1,"column":61}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":46,"column":16},"generated":{"line":1,"column":70}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":46,"column":23},"generated":{"line":1,"column":72}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":47,"column":2},"generated":{"line":1,"column":75}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":47,"column":9},"generated":{"line":1,"column":82}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":47,"column":13},"generated":{"line":1,"column":86}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":47,"column":25},"generated":{"line":1,"column":98}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":47,"column":34},"generated":{"line":1,"column":107}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":47,"column":41},"generated":{"line":1,"column":114}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":1,"column":211}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":1,"column":219}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":1,"column":228}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":46,"column":0},"generated":{"line":1,"column":230}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":46,"column":0},"generated":{"line":1,"column":238}},{"source":"../../src/whatwgEncodingApi.ts","name":null,"original":{"line":46,"column":0},"generated":{"line":1,"column":245}}],"sources":{"../../src/whatwgEncodingApi.ts":"/**\n * A declaration of the global TextEncoder and TextDecoder constructors.\n *\n * @see https://encoding.spec.whatwg.org/\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace Encoding {\n  interface TextDecoderOptions {\n    fatal?: boolean;\n    ignoreBOM?: boolean;\n  }\n\n  interface TextDecodeOptions {\n    stream?: boolean;\n  }\n\n  interface TextDecoder {\n    readonly encoding: string;\n    readonly fatal: boolean;\n    readonly ignoreBOM: boolean;\n    decode(input?: ArrayBuffer | ArrayBufferView, options?: TextDecodeOptions): string;\n  }\n\n  export interface TextDecoderConstructor {\n    new (label?: string, options?: TextDecoderOptions): TextDecoder;\n  }\n\n  interface TextEncoder {\n    readonly encoding: \"utf-8\";\n    encode(input?: string): Uint8Array;\n  }\n\n  export interface TextEncoderConstructor {\n    new (): TextEncoder;\n  }\n}\n\ndeclare const TextDecoder: Encoding.TextDecoderConstructor;\n\ndeclare const TextEncoder: Encoding.TextEncoderConstructor;\n\nexport function fromUtf8(input: string): Uint8Array {\n  return new TextEncoder().encode(input);\n}\n\nexport function toUtf8(input: Uint8Array): string {\n  return new TextDecoder(\"utf-8\").decode(input);\n}\n"},"lineCount":null}},"error":null,"hash":"bc1b7e95e7bd81d7cbe0d9ecdf7ed342","cacheData":{"env":{}}}